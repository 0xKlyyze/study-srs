// --- File: js/utils/latexProcessor.js ---
    const SVG_ICONS = {
        definition: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M18 2a2.5 2.5 0 0 1 2.5 2.5v14.25a.75.75 0 0 1-.75.75H5.5a1 1 0 0 0 0 2h13.25a.75.75 0 0 1 0 1.5H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2H18Zm-2 3H8a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1Z"></path></svg>`,
        theoreme: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M6 5h12v14H6m0-7h12"/></svg>`,
        proposition: `<svg viewBox="0 0 103.537 103.537" fill="currentColor"><path d="M82.095 4.695 73.617 26.8H31.449L21.278 4.3c-1.664-3.678-5.993-5.312-9.671-3.648-3.678 1.664-5.311 5.993-3.649 9.671l40.196 88.917c1.186 2.622 3.795 4.298 6.661 4.298.069 0 .144 0 .214-.003 2.947-.085 5.555-1.935 6.608-4.687L95.742 9.93c1.446-3.77-.438-7.995-4.208-9.44C87.774-.957 83.54.924 82.095 4.695zM54.261 77.265 38.056 41.417h29.953L54.261 77.265z"></path></svg>`,
        lemme: `<svg viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M8 9.1153C8 7.29468 10.2347 6.42094 11.4696 7.75874L40.9016 39.6434C42.0842 40.9246 41.1755 43 39.432 43H10C8.89543 43 8 42.1046 8 41V9.1153Z" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`,
        corollaire: `<svg viewBox="0 0 142.514 142.514" fill="currentColor"><path d="M34.367 142.514c11.645 0 17.827-10.4 19.645-16.544.029-.097.056-.196.081-.297 4.236-17.545 10.984-45.353 15.983-65.58h17.886c3.363 0 6.09-2.726 6.09-6.09 0-3.364-2.727-6.09-6.09-6.09H73.103c1.6-6.373 2.771-10.912 3.232-12.461l.512-1.734c1.888-6.443 6.309-21.535 13.146-21.535 6.34 0 7.285 9.764 7.328 10.236.27 3.343 3.186 5.868 6.537 5.579 3.354-.256 5.864-3.187 5.605-6.539C108.894 14.036 104.087 0 89.991 0 74.03 0 68.038 20.458 65.159 30.292l-.49 1.659c-.585 1.946-2.12 7.942-4.122 15.962H39.239c-3.364 0-6.09 2.726-6.09 6.09 0 3.364 2.726 6.09 6.09 6.09H57.53c-6.253 25.362-14.334 58.815-15.223 62.498-.332.965-2.829 7.742-7.937 7.742-7.8 0-11.177-10.948-11.204-11.03-.936-3.229-4.305-5.098-7.544-4.156-3.23.937-5.092 4.314-4.156 7.545C13.597 130.053 20.816 142.514 34.367 142.514zM124.685 126.809c3.589 0 6.605-2.549 6.605-6.607 0-1.885-.754-3.586-2.359-5.474l-12.646-14.534 12.271-14.346c1.132-1.416 1.98-2.926 1.98-4.908 0-3.59-2.927-6.231-6.703-6.231-2.547 0-4.527 1.604-6.229 3.684l-9.531 12.454L98.73 78.391c-1.89-2.357-3.869-3.682-6.7-3.682-3.59 0-6.607 2.551-6.607 6.609 0 1.885.756 3.586 2.357 5.471l11.799 13.592L86.647 115.67c-1.227 1.416-1.98 2.926-1.98 4.908 0 3.589 2.926 6.229 6.699 6.229 2.549 0 4.53-1.604 6.229-3.682l10.19-13.4 10.193 13.4c1.717 2.279 3.699 3.599 6.53 3.599z"></path></svg>`,
        exemple: `<svg viewBox="0 0 500 500" fill="currentColor"><path d="M427.56 46.592h-75.4c-3.444-15.636-17.532-27.36-34.356-27.36h-37.38C275.664 7.504 264.444 0 251.668 0s-23.996 7.504-28.756 19.232h-37.848c-16.828 0-30.912 11.728-34.356 27.36H75.776c-19.4 0-36.848 16.272-36.848 35.668v382.404c0 19.4 17.448 35.332 36.848 35.332h351.78c19.4 0 33.512-15.936 33.512-35.332V82.26C461.072 62.864 446.956 46.592 427.56 46.592zM251.668 15.644c8.62 0 15.636 7.012 15.636 15.636s-7.016 15.636-15.636 15.636c-8.624 0-15.636-7.012-15.636-15.636S243.044 15.644 251.668 15.644zM81.924 464.824V73.952h66.448V86.66c0 2.16 3.256 2.928 5.416 2.928h195.284c2.16 0 2.552-.768 2.552-2.928V73.952h66.448v390.872H81.924zM381.056 183.396H224.384c-4.316 0-7.816 3.496-7.816 7.816s3.5 7.82 7.816 7.82h156.672c4.316 0 7.82-3.504 7.82-7.82-3.504-4.316-7.008-7.816-10.512-7.816zM270.96 245.936h-46.576c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h46.576c4.316 0 7.816-3.5 7.816-7.82 0-4.316-3.5-7.816-7.816-7.816zm110.096 0h-74.916c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h74.92c4.316 0 7.82-3.5 7.816-7.82 0-4.316-3.5-7.816-7.82-7.816zm0 125.076H334.48c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h46.576c4.316 0 7.82-3.5 7.82-7.82 0-4.316-3.504-7.816-7.82-7.816zm-81.756 0h-74.916c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82H299.3c4.316 0 7.816-3.5 7.816-7.82 0-4.316-3.5-7.816-7.816-7.816zm81.756-62.536H224.384c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h156.672c4.316 0 7.82-3.5 7.82-7.82 0-4.316-3.504-7.816-7.82-7.816zm-186.44-146.8c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8.004 0 11.056l19.324 19.324c1.524 1.528 3.524 2.292 5.524 2.292 2.004 0 4.004-.764 5.528-2.292l35.368-35.368c3.056-3.052 3.056-7.996 0-11.052zm0 62.328c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8 0 11.056l19.324 19.324c1.524 1.528 3.524 2.288 5.524 2.288 2.004 0 4.004-.764 5.528-2.288l35.368-35.368c3.056-3.052 3.056-8 0-11.056zm0 62.464c-3.052-3.056-8-3.056-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.056-8-3.056-11.052 0-3.056 3.056-3.056 8 0 11.056l19.324 19.324c1.524 1.524 3.524 2.288 5.524 2.288 2.004 0 4.004-.76 5.528-2.288l35.368-35.368c3.056-3.052 3.056-7.996 0-11.052zm0 62.6c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8.004 0 11.056l19.324 19.324c1.524 1.528 3.524 2.292 5.524 2.292 2.004 0 4.004-.764 5.528-2.292l35.368-35.368c3.056-3.052 3.056-8 0-11.056z"></path></svg>`,
        explication: `<svg viewBox="0 0 31.357 31.357" fill="currentColor"><path d="M15.255 0c5.424 0 10.764 2.498 10.764 8.473 0 5.51-6.314 7.629-7.67 9.62-1.018 1.481-.678 3.562-3.475 3.562-1.822 0-2.712-1.482-2.712-2.838 0-5.046 7.414-6.188 7.414-10.343 0-2.287-1.522-3.643-4.066-3.643-5.424 0-3.306 5.592-7.414 5.592-1.483 0-2.756-.89-2.756-2.584C5.339 3.683 10.084 0 15.255 0zM15.044 24.406c1.904 0 3.475 1.566 3.475 3.476 0 1.91-1.568 3.476-3.475 3.476-1.907 0-3.476-1.564-3.476-3.476 0-1.91 1.569-3.476 3.476-3.476z"></path></svg>`,
        remarque: `<svg viewBox="0 0 279.682 279.682" fill="currentColor"><path d="M143.25 55.486c-41.06 0-74.465 33.405-74.465 74.465 0 16.824 5.511 32.711 15.938 45.939 1.998 2.536 4.15 5.033 6.23 7.448 6.212 7.208 12.078 14.017 14.166 21.675.045.165.438 1.773.38 7.247l-.01.791c-.063 4.444-.147 10.528 4.352 15.091 3.081 3.125 7.399 4.645 13.204 4.645h40.272c6.268 0 10.774-1.534 13.776-4.689 4.061-4.267 3.789-9.779 3.608-13.427-.032-.645-.066-1.296-.074-1.944-.065-5.48.345-7.025.362-7.09 2.121-7.657 8.993-15.732 15.057-22.855 2.023-2.377 3.934-4.622 5.714-6.879 10.431-13.23 15.944-29.12 15.944-45.951C217.705 88.892 184.305 55.486 143.25 55.486zm46.732 111.128c-1.607 2.036-3.429 4.178-5.358 6.445-7.07 8.307-15.084 17.722-18.089 28.572-.429 1.546-.988 4.395-.905 11.273.01.835.049 1.675.091 2.507.032.657.075 1.523.071 2.209-.528.086-1.325.166-2.475.166h-40.272c-1.276 0-2.022-.135-2.405-.237-.198-.977-.17-3.007-.152-4.287l.012-.844c.072-6.919-.483-9.789-.907-11.348-2.98-10.936-10.575-19.749-17.275-27.524-2.066-2.398-4.019-4.664-5.813-6.942-8.32-10.557-12.718-23.232-12.718-36.654 0-32.789 26.676-59.465 59.465-59.465 32.783 0 59.455 26.676 59.455 59.465 0 13.258-4.4 25.937-12.724 36.49zM161.766 239.564h-37.041c-7.995 0-14.5 6.505-14.5 14.5v11.117c0 7.995 6.505 14.5 14.5 14.5h37.041c7.995 0 14.5-6.505 14.5-14.5v-11.117c0-7.995-6.505-14.5-14.5-14.5zm-.5 25.118h-36.041v-10.117h36.041v10.117zM143.245 45.779c4.143 0 7.5-3.357 7.5-7.5V7.5c0-4.143-3.357-7.5-7.5-7.5-4.143 0-7.5 3.357-7.5 7.5v30.779c0 4.143 3.357 7.5 7.5 7.5zM241.917 34.598c-2.858-2.995-7.606-3.106-10.604-.248l-22.77 21.73c-2.997 2.859-3.107 7.607-.248 10.604 1.474 1.544 3.448 2.322 5.427 2.322 1.86 0 3.725-.688 5.177-2.074l22.77-21.731c2.859-2.858 2.969-7.606.248-10.604zM264.273 109.599c-.004 0-.008 0-.012 0l-29.311.047c-4.143.007-7.495 3.37-7.488 7.512.007 4.139 3.363 7.488 7.5 7.488.004 0 .008 0 .012 0l29.311-.047c4.143-.007 7.495-3.37 7.488-7.512-.007-4.142-3.364-7.491-7.488-7.488zM74.386 64.684c2.859-2.996 2.749-7.743-.248-10.604l-22.77-21.73c-2.994-2.858-7.742-2.749-10.604.248-2.859 2.996-2.749 7.743.248 10.604l22.77 21.731c1.452 1.386 3.315 2.074 5.177 2.074 1.862 0 3.727-.688 5.177-2.074zM44.729 109.646l-29.31-.047c-.004 0-.008 0-.012 0-4.137 0-7.493 3.351-7.5 7.488-.007 4.142 3.346 7.505 7.488 7.512l29.31.047c.004 0 .008 0 .012 0 4.137 0 7.493-3.351 7.5-7.488-.007-4.142-3.37-7.498-7.5-7.505z"></path></svg>`,
        preuve: `<svg viewBox="0 0 507 511.91" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"><path fill-rule="nonzero" d="M82.5 261.4c1.03 4.01-1.37 8.09-5.37 9.13a7.49 7.49 0 0 1-9.13-5.37c-1.04-3.95-1.93-7.89-2.66-11.82-.74-3.96-1.31-7.92-1.73-11.87-.26-2.55-.45-5.16-.58-7.81-.14-2.93-.21-5.55-.21-7.9 0-44.33 17.98-84.46 47.03-113.51 29.05-29.06 69.19-47.03 113.51-47.03 44.35 0 84.51 17.86 113.57 46.81 29.02 28.92 46.97 68.87 46.97 113.15 0 4.15-3.36 7.51-7.51 7.51s-7.52-3.36-7.52-7.51c0-40.16-16.24-76.36-42.51-102.52-26.32-26.23-62.75-42.41-103-42.41-40.18 0-76.56 16.29-102.89 42.62-26.33 26.32-42.61 62.71-42.61 102.89 0 2.72.04 5.14.14 7.19v.03c.11 2.31.28 4.63.52 6.96.38 3.58.9 7.15 1.56 10.7.66 3.58 1.47 7.17 2.42 10.76zm327.82 84.22L507 450.98l-66.66 60.93-93.23-102.57c-35.42 23.62-77.98 37.39-123.75 37.39-61.67 0-117.52-25-157.94-65.43C25 340.88 0 285.04 0 223.36c0-61.67 25-117.52 65.42-157.94S161.69 0 223.36 0c61.68 0 117.52 25 157.94 65.42 40.43 40.42 65.43 96.27 65.43 157.94 0 45.13-13.39 87.13-36.41 122.26zM363.68 83.05c-35.9-35.91-85.52-58.12-140.32-58.12S118.95 47.14 83.04 83.05c-35.9 35.9-58.11 85.52-58.11 140.31 0 54.8 22.21 104.42 58.11 140.32 35.91 35.91 85.52 58.12 140.32 58.12s104.42-22.21 140.32-58.12c35.91-35.9 58.12-85.52 58.12-140.32 0-54.79-22.21-104.41-58.12-140.31zM152.44 326.36c2.03-3.23 6.29-4.19 9.52-2.16a6.908 6.908 0 0 1 2.16 9.52l-11.49 18.33c-2.03 3.22-6.3 4.19-9.52 2.16a6.902 6.902 0 0 1-2.17-9.52l11.5-18.33zm58.46 6.54c.82-3.72 4.5-6.07 8.22-5.25 3.72.82 6.07 4.51 5.25 8.23l-4.98 22.37a6.896 6.896 0 0 1-8.22 5.25c-3.72-.82-6.07-4.51-5.25-8.23l4.98-22.37zm6.46-109.75c-.68-3.75 1.8-7.35 5.55-8.03a6.904 6.904 0 0 1 8.04 5.54c2.91 15.64 4.3 31.44 4.35 47.34.04 15.8-1.25 31.68-3.71 47.56a6.896 6.896 0 0 1-13.63-2.11c2.35-15.18 3.59-30.36 3.54-45.45-.04-15.01-1.37-29.98-4.14-44.85zM180.7 361.06c-2.2 3.11-6.51 3.85-9.63 1.65-3.11-2.2-3.85-6.51-1.65-9.63 3.95-5.58 7.3-11.7 10.03-18.36 2.74-6.68 4.86-13.98 6.34-21.91 2.74-14.7 1.42-33.59.17-51.44-.42-6-.84-11.89-1.1-18.03-.39-8.94-.55-17.73 1.12-25.77 1.86-8.91 5.87-16.66 13.92-22.29 1.81-1.27 3.76-2.4 5.85-3.36 2.09-.97 4.35-1.82 6.77-2.5 1.78-.51 3.56-.91 5.34-1.22 12.03-2.06 21.59 1.07 28.98 7.52 6.95 6.06 11.67 14.96 14.54 25.04.85 3 1.55 6.12 2.1 9.33.29 1.73.55 3.5.75 5.26.21 1.73.37 3.53.49 5.35 1.19 18.07.4 40.62-2.04 62.69-2.34 21.15-6.23 42.01-11.39 58.26-1.15 3.63-5.04 5.65-8.68 4.5a6.907 6.907 0 0 1-4.5-8.68c4.85-15.26 8.54-35.2 10.79-55.6 2.36-21.31 3.12-43 1.98-60.3-.1-1.48-.24-3.04-.43-4.65-.17-1.49-.39-3-.65-4.5-.45-2.69-1.04-5.32-1.76-7.86-2.2-7.69-5.57-14.28-10.31-18.42-4.31-3.75-10.07-5.55-17.54-4.27h-.02c-1.18.2-2.47.5-3.85.89-1.76.5-3.36 1.09-4.77 1.74-1.42.66-2.66 1.37-3.73 2.12-4.69 3.28-7.09 8.11-8.27 13.77-1.37 6.54-1.2 14.34-.86 22.35.23 5.29.67 11.45 1.1 17.71 1.31 18.66 2.7 38.41-.39 54.91-1.63 8.75-4.02 16.94-7.15 24.57-3.13 7.64-6.99 14.69-11.55 21.13zm-12.1-49.96c-.68 3.92-4.41 6.54-8.33 5.86-3.92-.68-6.54-4.42-5.86-8.33 1.36-7.62 2.13-16.13 2.39-25.38.28-9.42.05-19.75-.58-30.8-.14-2.41-.35-5.37-.55-8.21-1.34-19.08-2.43-34.45 8.79-54.41 4.98-8.86 11.92-16.43 21.29-22.39.36-.23.72-.41 1.09-.57 6.79-3.26 13.56-5.79 20.32-7.44 7.01-1.71 13.96-2.47 20.83-2.09 3.96.2 7.01 3.58 6.81 7.54-.2 3.97-3.58 7.02-7.54 6.81-5.47-.29-11.05.32-16.72 1.71-5.65 1.38-11.44 3.55-17.34 6.37-7.13 4.59-12.41 10.37-16.19 17.1-9.11 16.21-8.16 29.66-6.98 46.35v.03c.17 2.51.36 5.08.55 8.41.64 11.31.87 22.02.58 31.98-.29 10.13-1.11 19.35-2.56 27.46zm81.3-132.42a7.202 7.202 0 0 1-2.39-9.88 7.185 7.185 0 0 1 9.88-2.39c1.74 1.06 3.52 2.27 5.32 3.62 1.84 1.38 3.58 2.81 5.2 4.29 22.81 20.72 30.56 53.94 31.07 88.65.48 33.61-5.83 68.67-11.62 94.51-.85 3.87-4.69 6.31-8.56 5.46a7.188 7.188 0 0 1-5.46-8.56c5.61-25.07 11.74-59.02 11.28-91.24-.45-31.13-7.05-60.61-26.4-78.18a58.616 58.616 0 0 0-4.12-3.44c-1.33-1-2.74-1.95-4.2-2.84zM120.82 334.42a7.22 7.22 0 0 1-10.2-.62c-2.64-2.99-2.36-7.56.63-10.2 7.18-6.35 12.43-14.54 15.46-24.83 3.15-10.67 3.93-23.68 2.08-39.29-3.48-17.08-4.1-32.86-2.06-47.11 2.13-14.98 7.2-28.28 14.95-39.65 2.25-3.3 6.76-4.15 10.06-1.9 3.3 2.25 4.15 6.76 1.9 10.06-6.49 9.53-10.75 20.78-12.58 33.53-1.81 12.66-1.23 26.78 1.9 42.18.09.35.17.71.21 1.09 2.11 17.61 1.14 32.58-2.57 45.17-3.83 13-10.55 23.42-19.78 31.57zm60.24-178.94c-3.46 1.98-7.88.79-9.86-2.67a7.217 7.217 0 0 1 2.66-9.86c6.77-3.9 13.94-7 21.35-9.25 20.37-6.19 42.49-6.01 62.6 1.05 20.23 7.11 38.43 21.12 50.8 42.53l.22.42c4.02 7.04 7.42 14.88 10.04 23.51 3.82 12.56 6.41 26.55 7.72 41.92 1.3 15.1 1.39 31.67.23 49.7l-4.2 41.53a7.23 7.23 0 1 1-14.39-1.42l4.14-41.01c1.1-17.23 1.02-33.11-.23-47.61-1.24-14.48-3.62-27.46-7.1-38.92-2.29-7.56-5.25-14.4-8.74-20.51l-.22-.35c-10.52-18.23-25.93-30.12-43.03-36.13-17.21-6.04-36.17-6.19-53.65-.88a87.067 87.067 0 0 0-18.34 7.95zm161.69 118.63c0-4.04 3.28-7.33 7.33-7.33 4.04 0 7.33 3.29 7.33 7.33v25.21c0 4.04-3.29 7.32-7.33 7.32-4.05 0-7.33-3.28-7.33-7.32v-25.21zm-241 38.53a7.31 7.31 0 0 1-10.3-.75c-2.64-3.05-2.3-7.66.74-10.3 1.42-1.23 2.68-2.7 3.76-4.4 1.12-1.78 2.06-3.87 2.82-6.27 3.91-12.48 1.52-25.66-.91-39.03-1.68-9.24-3.37-18.58-3.31-28.39.29-50.04 31.58-90.85 72.5-111.73 17.17-8.76 36.09-14.03 55.17-15.01 19.19-.98 38.53 2.37 56.39 10.87 39.83 18.94 72.17 63.17 78.88 141.41a7.327 7.327 0 0 1-6.7 7.9 7.327 7.327 0 0 1-7.9-6.7c-6.19-72.18-35.06-112.53-70.52-129.39-15.61-7.43-32.56-10.36-49.4-9.49-16.96.87-33.86 5.6-49.27 13.46-36.45 18.59-64.3 54.68-64.56 98.74-.04 8.49 1.53 17.17 3.09 25.76 2.75 15.16 5.47 30.13.5 45.95-1.12 3.59-2.61 6.82-4.42 9.7-1.86 2.94-4.05 5.49-6.56 7.67z"></path></svg>`,
        error: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></svg>`,
        // Add other types as needed...
        text: '', // No icon for text
        'latex-block': '', // No icon for latex-block
        other: '', // No icon for other
    };
/**
 * Production-ready LaTeX processor that handles fenced code blocks, structural environments,
 * and math expressions using KaTeX. Processes \textbf{} blocks into styled HTML structures
 * and converts LaTeX environments into semantic HTML.
 *
 * @param {string} rawText - The raw input text.
 * @param {HTMLElement} outputElement - The container element to render the final HTML into.
 * @param {object} [katexOptions] - Optional KaTeX auto-render options for the final pass.
 * @returns {{finalHTML: string}} - Object containing the final innerHTML.
 */
export function processAndRenderLatex(rawText, outputElement, katexOptions = null) {
    // --- Essential Checks ---
    if (typeof katex !== 'object' || typeof katex.renderToString !== 'function') {
        console.error("Global 'katex' object or 'katex.renderToString' not found.");
        outputElement.innerHTML = `<span style="color: red;">Error: KaTeX library missing renderToString.</span>`;
        return { finalHTML: outputElement.innerHTML };
    }

    if (typeof window.renderMathInElement !== 'function') {
        console.warn("Global 'renderMathInElement' function not found. Final pass for delimited math might fail.");
    }

    if (!outputElement) {
        console.error("Output element not provided.");
        return { finalHTML: '' };
    }

    

    let inputText = rawText || '';
    const finalOutputSegments = [];
    let finalRenderPassNeeded = false;
    let blockCounter = 0; // Counter for unique IDs

    // --- Regex Definitions ---
    const fenceDelimiterRegexGlobal = /(```\s*latex\s*\n?([\s\S]*?)\n?\s*```)/gi;
    const v3_blockRegex = /\\textbf\{([^}]+)\}(?:\s*:\s*)?([\s\S]*?)(?=\\textbf\{[^}]+\}(?:\s*:\s*)?|$)/gi;
    const v3_looseTextbfCheckRegex = /\\textbf\{[^}]+\}/i;
    const delimiterCheckRegex = /(\${1,2}|\\\[|\\\()/;

    // --- Environment Definitions ---
    const LIST_ENVIRONMENTS = ['enumerate', 'itemize'];
    const STRUCTURAL_ENVIRONMENTS = ['theorem', 'proposition', 'definition', 'lemma', 'corollary', 'remark', 'proof', 'demonstration', 'theoreme', 'lemme', 'corollaire', 'remarque', 'preuve', 'example', 'explanation', 'exemple', 'explication'];
    const STRUCTURAL_ENV_MAP = {
        theorem: 'theoreme', theoreme: 'theoreme',
        proposition: 'proposition',
        definition: 'definition',
        lemma: 'lemme', lemme: 'lemme',
        corollary: 'corollaire', corollaire: 'corollaire',
        remark: 'remarque', remarque: 'remarque',
        proof: 'preuve', preuve: 'preuve',
        demonstration: 'preuve',
        example: 'exemple', exemple: 'exemple',
        explanation: 'explication', explication: 'explication'
    };
    // Add 'text' and 'latex-block' types for internal use
    const ALL_TYPES_MAP = { ...STRUCTURAL_ENV_MAP, text: 'text', 'latex-block': 'latex-block', error: 'error' };

    const SVG_ICONS = {
        definition: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M18 2a2.5 2.5 0 0 1 2.5 2.5v14.25a.75.75 0 0 1-.75.75H5.5a1 1 0 0 0 0 2h13.25a.75.75 0 0 1 0 1.5H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2H18Zm-2 3H8a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1Z"></path></svg>`,
        theoreme: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M6 5h12v14H6m0-7h12"/></svg>`,
        proposition: `<svg viewBox="0 0 103.537 103.537" fill="currentColor"><path d="M82.095 4.695 73.617 26.8H31.449L21.278 4.3c-1.664-3.678-5.993-5.312-9.671-3.648-3.678 1.664-5.311 5.993-3.649 9.671l40.196 88.917c1.186 2.622 3.795 4.298 6.661 4.298.069 0 .144 0 .214-.003 2.947-.085 5.555-1.935 6.608-4.687L95.742 9.93c1.446-3.77-.438-7.995-4.208-9.44C87.774-.957 83.54.924 82.095 4.695zM54.261 77.265 38.056 41.417h29.953L54.261 77.265z"></path></svg>`,
        lemme: `<svg viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M8 9.1153C8 7.29468 10.2347 6.42094 11.4696 7.75874L40.9016 39.6434C42.0842 40.9246 41.1755 43 39.432 43H10C8.89543 43 8 42.1046 8 41V9.1153Z" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`,
        corollaire: `<svg viewBox="0 0 142.514 142.514" fill="currentColor"><path d="M34.367 142.514c11.645 0 17.827-10.4 19.645-16.544.029-.097.056-.196.081-.297 4.236-17.545 10.984-45.353 15.983-65.58h17.886c3.363 0 6.09-2.726 6.09-6.09 0-3.364-2.727-6.09-6.09-6.09H73.103c1.6-6.373 2.771-10.912 3.232-12.461l.512-1.734c1.888-6.443 6.309-21.535 13.146-21.535 6.34 0 7.285 9.764 7.328 10.236.27 3.343 3.186 5.868 6.537 5.579 3.354-.256 5.864-3.187 5.605-6.539C108.894 14.036 104.087 0 89.991 0 74.03 0 68.038 20.458 65.159 30.292l-.49 1.659c-.585 1.946-2.12 7.942-4.122 15.962H39.239c-3.364 0-6.09 2.726-6.09 6.09 0 3.364 2.726 6.09 6.09 6.09H57.53c-6.253 25.362-14.334 58.815-15.223 62.498-.332.965-2.829 7.742-7.937 7.742-7.8 0-11.177-10.948-11.204-11.03-.936-3.229-4.305-5.098-7.544-4.156-3.23.937-5.092 4.314-4.156 7.545C13.597 130.053 20.816 142.514 34.367 142.514zM124.685 126.809c3.589 0 6.605-2.549 6.605-6.607 0-1.885-.754-3.586-2.359-5.474l-12.646-14.534 12.271-14.346c1.132-1.416 1.98-2.926 1.98-4.908 0-3.59-2.927-6.231-6.703-6.231-2.547 0-4.527 1.604-6.229 3.684l-9.531 12.454L98.73 78.391c-1.89-2.357-3.869-3.682-6.7-3.682-3.59 0-6.607 2.551-6.607 6.609 0 1.885.756 3.586 2.357 5.471l11.799 13.592L86.647 115.67c-1.227 1.416-1.98 2.926-1.98 4.908 0 3.589 2.926 6.229 6.699 6.229 2.549 0 4.53-1.604 6.229-3.682l10.19-13.4 10.193 13.4c1.717 2.279 3.699 3.599 6.53 3.599z"></path></svg>`,
        exemple: `<svg viewBox="0 0 500 500" fill="currentColor"><path d="M427.56 46.592h-75.4c-3.444-15.636-17.532-27.36-34.356-27.36h-37.38C275.664 7.504 264.444 0 251.668 0s-23.996 7.504-28.756 19.232h-37.848c-16.828 0-30.912 11.728-34.356 27.36H75.776c-19.4 0-36.848 16.272-36.848 35.668v382.404c0 19.4 17.448 35.332 36.848 35.332h351.78c19.4 0 33.512-15.936 33.512-35.332V82.26C461.072 62.864 446.956 46.592 427.56 46.592zM251.668 15.644c8.62 0 15.636 7.012 15.636 15.636s-7.016 15.636-15.636 15.636c-8.624 0-15.636-7.012-15.636-15.636S243.044 15.644 251.668 15.644zM81.924 464.824V73.952h66.448V86.66c0 2.16 3.256 2.928 5.416 2.928h195.284c2.16 0 2.552-.768 2.552-2.928V73.952h66.448v390.872H81.924zM381.056 183.396H224.384c-4.316 0-7.816 3.496-7.816 7.816s3.5 7.82 7.816 7.82h156.672c4.316 0 7.82-3.504 7.82-7.82-3.504-4.316-7.008-7.816-10.512-7.816zM270.96 245.936h-46.576c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h46.576c4.316 0 7.816-3.5 7.816-7.82 0-4.316-3.5-7.816-7.816-7.816zm110.096 0h-74.916c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h74.92c4.316 0 7.82-3.5 7.816-7.82 0-4.316-3.5-7.816-7.82-7.816zm0 125.076H334.48c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h46.576c4.316 0 7.82-3.5 7.82-7.82 0-4.316-3.504-7.816-7.82-7.816zm-81.756 0h-74.916c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82H299.3c4.316 0 7.816-3.5 7.816-7.82 0-4.316-3.5-7.816-7.816-7.816zm81.756-62.536H224.384c-4.316 0-7.816 3.5-7.816 7.816 0 4.32 3.5 7.82 7.816 7.82h156.672c4.316 0 7.82-3.5 7.82-7.82 0-4.316-3.504-7.816-7.82-7.816zm-186.44-146.8c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8.004 0 11.056l19.324 19.324c1.524 1.528 3.524 2.292 5.524 2.292 2.004 0 4.004-.764 5.528-2.292l35.368-35.368c3.056-3.052 3.056-7.996 0-11.052zm0 62.328c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8 0 11.056l19.324 19.324c1.524 1.528 3.524 2.288 5.524 2.288 2.004 0 4.004-.764 5.528-2.288l35.368-35.368c3.056-3.052 3.056-8 0-11.056zm0 62.464c-3.052-3.056-8-3.056-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.056-8-3.056-11.052 0-3.056 3.056-3.056 8 0 11.056l19.324 19.324c1.524 1.524 3.524 2.288 5.524 2.288 2.004 0 4.004-.76 5.528-2.288l35.368-35.368c3.056-3.052 3.056-7.996 0-11.052zm0 62.6c-3.052-3.052-8-3.052-11.052 0l-29.844 29.84-13.796-13.796c-3.052-3.052-8-3.052-11.052 0-3.056 3.056-3.056 8.004 0 11.056l19.324 19.324c1.524 1.528 3.524 2.292 5.524 2.292 2.004 0 4.004-.764 5.528-2.292l35.368-35.368c3.056-3.052 3.056-8 0-11.056z"></path></svg>`,
        explication: `<svg viewBox="0 0 31.357 31.357" fill="currentColor"><path d="M15.255 0c5.424 0 10.764 2.498 10.764 8.473 0 5.51-6.314 7.629-7.67 9.62-1.018 1.481-.678 3.562-3.475 3.562-1.822 0-2.712-1.482-2.712-2.838 0-5.046 7.414-6.188 7.414-10.343 0-2.287-1.522-3.643-4.066-3.643-5.424 0-3.306 5.592-7.414 5.592-1.483 0-2.756-.89-2.756-2.584C5.339 3.683 10.084 0 15.255 0zM15.044 24.406c1.904 0 3.475 1.566 3.475 3.476 0 1.91-1.568 3.476-3.475 3.476-1.907 0-3.476-1.564-3.476-3.476 0-1.91 1.569-3.476 3.476-3.476z"></path></svg>`,
        remarque: `<svg viewBox="0 0 279.682 279.682" fill="currentColor"><path d="M143.25 55.486c-41.06 0-74.465 33.405-74.465 74.465 0 16.824 5.511 32.711 15.938 45.939 1.998 2.536 4.15 5.033 6.23 7.448 6.212 7.208 12.078 14.017 14.166 21.675.045.165.438 1.773.38 7.247l-.01.791c-.063 4.444-.147 10.528 4.352 15.091 3.081 3.125 7.399 4.645 13.204 4.645h40.272c6.268 0 10.774-1.534 13.776-4.689 4.061-4.267 3.789-9.779 3.608-13.427-.032-.645-.066-1.296-.074-1.944-.065-5.48.345-7.025.362-7.09 2.121-7.657 8.993-15.732 15.057-22.855 2.023-2.377 3.934-4.622 5.714-6.879 10.431-13.23 15.944-29.12 15.944-45.951C217.705 88.892 184.305 55.486 143.25 55.486zm46.732 111.128c-1.607 2.036-3.429 4.178-5.358 6.445-7.07 8.307-15.084 17.722-18.089 28.572-.429 1.546-.988 4.395-.905 11.273.01.835.049 1.675.091 2.507.032.657.075 1.523.071 2.209-.528.086-1.325.166-2.475.166h-40.272c-1.276 0-2.022-.135-2.405-.237-.198-.977-.17-3.007-.152-4.287l.012-.844c.072-6.919-.483-9.789-.907-11.348-2.98-10.936-10.575-19.749-17.275-27.524-2.066-2.398-4.019-4.664-5.813-6.942-8.32-10.557-12.718-23.232-12.718-36.654 0-32.789 26.676-59.465 59.465-59.465 32.783 0 59.455 26.676 59.455 59.465 0 13.258-4.4 25.937-12.724 36.49zM161.766 239.564h-37.041c-7.995 0-14.5 6.505-14.5 14.5v11.117c0 7.995 6.505 14.5 14.5 14.5h37.041c7.995 0 14.5-6.505 14.5-14.5v-11.117c0-7.995-6.505-14.5-14.5-14.5zm-.5 25.118h-36.041v-10.117h36.041v10.117zM143.245 45.779c4.143 0 7.5-3.357 7.5-7.5V7.5c0-4.143-3.357-7.5-7.5-7.5-4.143 0-7.5 3.357-7.5 7.5v30.779c0 4.143 3.357 7.5 7.5 7.5zM241.917 34.598c-2.858-2.995-7.606-3.106-10.604-.248l-22.77 21.73c-2.997 2.859-3.107 7.607-.248 10.604 1.474 1.544 3.448 2.322 5.427 2.322 1.86 0 3.725-.688 5.177-2.074l22.77-21.731c2.859-2.858 2.969-7.606.248-10.604zM264.273 109.599c-.004 0-.008 0-.012 0l-29.311.047c-4.143.007-7.495 3.37-7.488 7.512.007 4.139 3.363 7.488 7.5 7.488.004 0 .008 0 .012 0l29.311-.047c4.143-.007 7.495-3.37 7.488-7.512-.007-4.142-3.364-7.491-7.488-7.488zM74.386 64.684c2.859-2.996 2.749-7.743-.248-10.604l-22.77-21.73c-2.994-2.858-7.742-2.749-10.604.248-2.859 2.996-2.749 7.743.248 10.604l22.77 21.731c1.452 1.386 3.315 2.074 5.177 2.074 1.862 0 3.727-.688 5.177-2.074zM44.729 109.646l-29.31-.047c-.004 0-.008 0-.012 0-4.137 0-7.493 3.351-7.5 7.488-.007 4.142 3.346 7.505 7.488 7.512l29.31.047c.004 0 .008 0 .012 0 4.137 0 7.493-3.351 7.5-7.488-.007-4.142-3.37-7.498-7.5-7.505z"></path></svg>`,
        preuve: `<svg viewBox="0 0 507 511.91" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"><path fill-rule="nonzero" d="M82.5 261.4c1.03 4.01-1.37 8.09-5.37 9.13a7.49 7.49 0 0 1-9.13-5.37c-1.04-3.95-1.93-7.89-2.66-11.82-.74-3.96-1.31-7.92-1.73-11.87-.26-2.55-.45-5.16-.58-7.81-.14-2.93-.21-5.55-.21-7.9 0-44.33 17.98-84.46 47.03-113.51 29.05-29.06 69.19-47.03 113.51-47.03 44.35 0 84.51 17.86 113.57 46.81 29.02 28.92 46.97 68.87 46.97 113.15 0 4.15-3.36 7.51-7.51 7.51s-7.52-3.36-7.52-7.51c0-40.16-16.24-76.36-42.51-102.52-26.32-26.23-62.75-42.41-103-42.41-40.18 0-76.56 16.29-102.89 42.62-26.33 26.32-42.61 62.71-42.61 102.89 0 2.72.04 5.14.14 7.19v.03c.11 2.31.28 4.63.52 6.96.38 3.58.9 7.15 1.56 10.7.66 3.58 1.47 7.17 2.42 10.76zm327.82 84.22L507 450.98l-66.66 60.93-93.23-102.57c-35.42 23.62-77.98 37.39-123.75 37.39-61.67 0-117.52-25-157.94-65.43C25 340.88 0 285.04 0 223.36c0-61.67 25-117.52 65.42-157.94S161.69 0 223.36 0c61.68 0 117.52 25 157.94 65.42 40.43 40.42 65.43 96.27 65.43 157.94 0 45.13-13.39 87.13-36.41 122.26zM363.68 83.05c-35.9-35.91-85.52-58.12-140.32-58.12S118.95 47.14 83.04 83.05c-35.9 35.9-58.11 85.52-58.11 140.31 0 54.8 22.21 104.42 58.11 140.32 35.91 35.91 85.52 58.12 140.32 58.12s104.42-22.21 140.32-58.12c35.91-35.9 58.12-85.52 58.12-140.32 0-54.79-22.21-104.41-58.12-140.31zM152.44 326.36c2.03-3.23 6.29-4.19 9.52-2.16a6.908 6.908 0 0 1 2.16 9.52l-11.49 18.33c-2.03 3.22-6.3 4.19-9.52 2.16a6.902 6.902 0 0 1-2.17-9.52l11.5-18.33zm58.46 6.54c.82-3.72 4.5-6.07 8.22-5.25 3.72.82 6.07 4.51 5.25 8.23l-4.98 22.37a6.896 6.896 0 0 1-8.22 5.25c-3.72-.82-6.07-4.51-5.25-8.23l4.98-22.37zm6.46-109.75c-.68-3.75 1.8-7.35 5.55-8.03a6.904 6.904 0 0 1 8.04 5.54c2.91 15.64 4.3 31.44 4.35 47.34.04 15.8-1.25 31.68-3.71 47.56a6.896 6.896 0 0 1-13.63-2.11c2.35-15.18 3.59-30.36 3.54-45.45-.04-15.01-1.37-29.98-4.14-44.85zM180.7 361.06c-2.2 3.11-6.51 3.85-9.63 1.65-3.11-2.2-3.85-6.51-1.65-9.63 3.95-5.58 7.3-11.7 10.03-18.36 2.74-6.68 4.86-13.98 6.34-21.91 2.74-14.7 1.42-33.59.17-51.44-.42-6-.84-11.89-1.1-18.03-.39-8.94-.55-17.73 1.12-25.77 1.86-8.91 5.87-16.66 13.92-22.29 1.81-1.27 3.76-2.4 5.85-3.36 2.09-.97 4.35-1.82 6.77-2.5 1.78-.51 3.56-.91 5.34-1.22 12.03-2.06 21.59 1.07 28.98 7.52 6.95 6.06 11.67 14.96 14.54 25.04.85 3 1.55 6.12 2.1 9.33.29 1.73.55 3.5.75 5.26.21 1.73.37 3.53.49 5.35 1.19 18.07.4 40.62-2.04 62.69-2.34 21.15-6.23 42.01-11.39 58.26-1.15 3.63-5.04 5.65-8.68 4.5a6.907 6.907 0 0 1-4.5-8.68c4.85-15.26 8.54-35.2 10.79-55.6 2.36-21.31 3.12-43 1.98-60.3-.1-1.48-.24-3.04-.43-4.65-.17-1.49-.39-3-.65-4.5-.45-2.69-1.04-5.32-1.76-7.86-2.2-7.69-5.57-14.28-10.31-18.42-4.31-3.75-10.07-5.55-17.54-4.27h-.02c-1.18.2-2.47.5-3.85.89-1.76.5-3.36 1.09-4.77 1.74-1.42.66-2.66 1.37-3.73 2.12-4.69 3.28-7.09 8.11-8.27 13.77-1.37 6.54-1.2 14.34-.86 22.35.23 5.29.67 11.45 1.1 17.71 1.31 18.66 2.7 38.41-.39 54.91-1.63 8.75-4.02 16.94-7.15 24.57-3.13 7.64-6.99 14.69-11.55 21.13zm-12.1-49.96c-.68 3.92-4.41 6.54-8.33 5.86-3.92-.68-6.54-4.42-5.86-8.33 1.36-7.62 2.13-16.13 2.39-25.38.28-9.42.05-19.75-.58-30.8-.14-2.41-.35-5.37-.55-8.21-1.34-19.08-2.43-34.45 8.79-54.41 4.98-8.86 11.92-16.43 21.29-22.39.36-.23.72-.41 1.09-.57 6.79-3.26 13.56-5.79 20.32-7.44 7.01-1.71 13.96-2.47 20.83-2.09 3.96.2 7.01 3.58 6.81 7.54-.2 3.97-3.58 7.02-7.54 6.81-5.47-.29-11.05.32-16.72 1.71-5.65 1.38-11.44 3.55-17.34 6.37-7.13 4.59-12.41 10.37-16.19 17.1-9.11 16.21-8.16 29.66-6.98 46.35v.03c.17 2.51.36 5.08.55 8.41.64 11.31.87 22.02.58 31.98-.29 10.13-1.11 19.35-2.56 27.46zm81.3-132.42a7.202 7.202 0 0 1-2.39-9.88 7.185 7.185 0 0 1 9.88-2.39c1.74 1.06 3.52 2.27 5.32 3.62 1.84 1.38 3.58 2.81 5.2 4.29 22.81 20.72 30.56 53.94 31.07 88.65.48 33.61-5.83 68.67-11.62 94.51-.85 3.87-4.69 6.31-8.56 5.46a7.188 7.188 0 0 1-5.46-8.56c5.61-25.07 11.74-59.02 11.28-91.24-.45-31.13-7.05-60.61-26.4-78.18a58.616 58.616 0 0 0-4.12-3.44c-1.33-1-2.74-1.95-4.2-2.84zM120.82 334.42a7.22 7.22 0 0 1-10.2-.62c-2.64-2.99-2.36-7.56.63-10.2 7.18-6.35 12.43-14.54 15.46-24.83 3.15-10.67 3.93-23.68 2.08-39.29-3.48-17.08-4.1-32.86-2.06-47.11 2.13-14.98 7.2-28.28 14.95-39.65 2.25-3.3 6.76-4.15 10.06-1.9 3.3 2.25 4.15 6.76 1.9 10.06-6.49 9.53-10.75 20.78-12.58 33.53-1.81 12.66-1.23 26.78 1.9 42.18.09.35.17.71.21 1.09 2.11 17.61 1.14 32.58-2.57 45.17-3.83 13-10.55 23.42-19.78 31.57zm60.24-178.94c-3.46 1.98-7.88.79-9.86-2.67a7.217 7.217 0 0 1 2.66-9.86c6.77-3.9 13.94-7 21.35-9.25 20.37-6.19 42.49-6.01 62.6 1.05 20.23 7.11 38.43 21.12 50.8 42.53l.22.42c4.02 7.04 7.42 14.88 10.04 23.51 3.82 12.56 6.41 26.55 7.72 41.92 1.3 15.1 1.39 31.67.23 49.7l-4.2 41.53a7.23 7.23 0 1 1-14.39-1.42l4.14-41.01c1.1-17.23 1.02-33.11-.23-47.61-1.24-14.48-3.62-27.46-7.1-38.92-2.29-7.56-5.25-14.4-8.74-20.51l-.22-.35c-10.52-18.23-25.93-30.12-43.03-36.13-17.21-6.04-36.17-6.19-53.65-.88a87.067 87.067 0 0 0-18.34 7.95zm161.69 118.63c0-4.04 3.28-7.33 7.33-7.33 4.04 0 7.33 3.29 7.33 7.33v25.21c0 4.04-3.29 7.32-7.33 7.32-4.05 0-7.33-3.28-7.33-7.32v-25.21zm-241 38.53a7.31 7.31 0 0 1-10.3-.75c-2.64-3.05-2.3-7.66.74-10.3 1.42-1.23 2.68-2.7 3.76-4.4 1.12-1.78 2.06-3.87 2.82-6.27 3.91-12.48 1.52-25.66-.91-39.03-1.68-9.24-3.37-18.58-3.31-28.39.29-50.04 31.58-90.85 72.5-111.73 17.17-8.76 36.09-14.03 55.17-15.01 19.19-.98 38.53 2.37 56.39 10.87 39.83 18.94 72.17 63.17 78.88 141.41a7.327 7.327 0 0 1-6.7 7.9 7.327 7.327 0 0 1-7.9-6.7c-6.19-72.18-35.06-112.53-70.52-129.39-15.61-7.43-32.56-10.36-49.4-9.49-16.96.87-33.86 5.6-49.27 13.46-36.45 18.59-64.3 54.68-64.56 98.74-.04 8.49 1.53 17.17 3.09 25.76 2.75 15.16 5.47 30.13.5 45.95-1.12 3.59-2.61 6.82-4.42 9.7-1.86 2.94-4.05 5.49-6.56 7.67z"></path></svg>`,
        error: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></svg>`,
        // Add other types as needed...
        text: '', // No icon for text
        'latex-block': '', // No icon for latex-block
        other: '', // No icon for other
    };

    // Precompile structural env regex for efficiency
    const structuralEnvBlockRegex = new RegExp(
        `\\\\begin\\{(${STRUCTURAL_ENVIRONMENTS.join('|')})\\}` +
        `(?:\\s*\\[([^\\]]*)\\])?` + // Optional title in brackets
        `([\\s\\S]*?)` + // Content
        `\\\\end\\{\\1\\}`, // Matching end environment
        'gi'
    );

    // --- Step 1: Find fences ---
    const matches = [...inputText.matchAll(fenceDelimiterRegexGlobal)];
    let lastIndex = 0;

    // --- Step 2: Process Segments ---
    matches.forEach((match, i) => {
        const fenceStartIndex = match.index;
        const fenceEndIndex = fenceStartIndex + match[0].length;
        const fencedContentRaw = match[2] || '';

        // --- Process Text BEFORE ---
        if (fenceStartIndex > lastIndex) {
            let outsideText = inputText.substring(lastIndex, fenceStartIndex);
            if (outsideText.trim()) {
                processOutsideTextSegment(outsideText, finalOutputSegments);
                finalRenderPassNeeded = true;
            }
        }

        // --- Process FENCED Content ---
        processFencedContentSegment(fencedContentRaw, finalOutputSegments);

        lastIndex = fenceEndIndex;
    });

    // --- Process Remaining Text AFTER ---
    if (lastIndex < inputText.length) {
        let remainingText = inputText.substring(lastIndex);
        if (remainingText.trim()) {
            processOutsideTextSegment(remainingText, finalOutputSegments);
            finalRenderPassNeeded = true;
        }
    }



    // --- Helper: generateBlockHTML ---
    // Centralized function to create the block structure
// --- Helper: Generate HTML for a block ---
function generateBlockHTML(blockTypeSlug, blockTitle, blockContent, blockId) {
    // *** MODIFICATION START ***
    // Get SVG content from the map, default to empty string if not found
    const svgContent = SVG_ICONS[blockTypeSlug] || '';

    // Create the icon element string. If svgContent is empty, this will be empty too.
    const iconElement = svgContent
        ? `<span class="type-icon type-icon-${blockTypeSlug}">${svgContent}</span>`
        : '';
    // *** MODIFICATION END ***

    // Escape HTML characters in title and content to prevent XSS
    const escapedTitle = blockTitle.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    // Content is processed later, so we don't escape it here

    // Determine if hint button should be shown (only if content exists)
    const showHintButton = blockContent && blockContent.trim().length > 0;

    return `
        <div class="explanation-block type-${blockTypeSlug}" id="${blockId}" data-block-type="${escapedTitle}">
            <div class="explanation-block-header" tabindex="-1" role="button" aria-expanded="false" aria-controls="${blockId}-content">
                ${iconElement}
                <span class="explanation-block-title">${escapedTitle}</span>
                <div class="header-controls">
                    ${showHintButton ? `
                        <button class="hint-button" aria-label="Show hint for ${escapedTitle}">
                            <svg class="hint-icon" viewBox="0 0 24 24" fill="currentColor"><path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"></path></svg>
                        </button>
                    ` : ''}
                    <button class="toggle-icon-button" aria-label="Toggle ${escapedTitle}">
                        <svg class="toggle-icon" viewBox="0 0 24 24" fill="currentColor"><path d="M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"></path></svg>
                    </button>
                </div>
            </div>
            <div class="content-container" id="${blockId}-content" role="region" aria-labelledby="${blockId}-header">
                 <div class="explanation-block-content-blurred">${blockContent}</div>
                 <div class="explanation-block-hint-preview" aria-hidden="true"></div>
            </div>
        </div>
    `;
}

    // --- Helper: processOutsideTextSegment ---
    function processOutsideTextSegment(text, outputSegments) {
        let processedText = text.trim();
        if (processedText.length === 0) return;

        // 1. Preprocess Structural Envs
        processedText = preprocessStructuralEnvs(processedText);

        // 2. Preprocess Lists
        processedText = preprocessListEnvironments(processedText);

        // 3. Markdown removal (simple)
        processedText = processedText.replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1');

        // 4. Segment remaining text using V3 \textbf logic OR treat as single text block
        segmentUsingTextbf(processedText, outputSegments, "Outer");
    }

    // --- Helper: Preprocess List Environments ---
    function preprocessListEnvironments(text) {
        const listBlockRegex = /\\begin\{(enumerate|itemize)\}([\s\S]*?)\\end\{\1\}/gi;
        let iteration = 0; // Safety break

        return text.replace(listBlockRegex, (match, envName, innerContent) => {
            if (iteration++ > 10) return match; // Prevent infinite loops

            const listTag = (envName === 'enumerate') ? 'ol' : 'ul';
            const listClass = `latex-${envName}`;

            // Process \item, handling potential nested structures clumsily for now
            let itemsHtml = innerContent
                .split(/\\item(?![^{]*\})/g) // Split by \item, but avoid splitting inside braces (simple lookahead)
                .map(item => item.trim())
                .filter(item => item.length > 0) // Remove empty items
                .map(itemContent => `<li>${itemContent}</li>`) // Wrap each part in <li>
                .join('\n');

            return `<${listTag} class="${listClass}">\n${itemsHtml}\n</${listTag}>`;
        });
    }

    // --- Helper: Preprocess Structural Environments ---
    function preprocessStructuralEnvs(text) {
        let iteration = 0; // Safety break
        structuralEnvBlockRegex.lastIndex = 0; // Reset regex state

        const processedText = text.replace(structuralEnvBlockRegex, (match, envName, optionalTitle, innerContent) => {
            if (iteration++ > 20) return match; // Safety break

            const envNameLower = envName.toLowerCase();
            const slug = ALL_TYPES_MAP[envNameLower] || envNameLower;
            const title = (optionalTitle || '').trim() || (envName.charAt(0).toUpperCase() + envName.slice(1));
            const cleanTitle = title.replace(/:$/, '').trim();
            const cleanContent = (innerContent || '').trim();

            // Generate the block HTML using the helper
            return generateBlockHTML(slug, cleanTitle, cleanContent, `${slug}-${blockCounter + 1}`);
        });

        structuralEnvBlockRegex.lastIndex = 0; // Reset regex state after use
        return processedText;
    }


    // --- Helper: processFencedContentSegment ---
    function processFencedContentSegment(fencedContentRaw, outputSegments) {
        let fencedContentTrimmed = fencedContentRaw.trim();
        if (fencedContentTrimmed.length === 0) return;

        const originalContent = fencedContentTrimmed;

        // Apply Preprocessing Steps (Lists, Environments)
        let processedContent = fencedContentTrimmed;
        processedContent = preprocessStructuralEnvs(processedContent); // Preprocess envs *within* fence
        processedContent = preprocessListEnvironments(processedContent); // Preprocess lists *within* fence

        const wasPreprocessed = (processedContent !== originalContent);

        // Check characteristics of the preprocessed content
        const containsDelimiters = delimiterCheckRegex.test(processedContent);
        const containsTextbf = v3_looseTextbfCheckRegex.test(processedContent);

        // Condition for direct rendering (pure LaTeX without known structures/delimiters needing final pass)
        const isPureLatex = !containsDelimiters && !containsTextbf && !wasPreprocessed;

        if (isPureLatex) {
             // Direct render as a LaTeX block
            let renderedHtml = '';
            try {
                renderedHtml = katex.renderToString(originalContent, {
                    displayMode: true, throwOnError: false, errorColor: '#FF5555', trust: true, fleqn: true
                });
            } catch (error) {
                console.error(`KaTeX direct render error in fence: ${error}`);
                renderedHtml = `<span class="katex-error">Error rendering LaTeX</span>`;
                outputSegments.push(generateBlockHTML('error', 'LaTeX Error', renderedHtml, `latex-err-${blockCounter + 1}`));
                return; // Don't proceed further for this segment on error
            }
             outputSegments.push(generateBlockHTML('latex-block', 'LaTeX Block', renderedHtml, `latex-${blockCounter + 1}`));

        } else {
            // Content likely mixed or needs final pass, use textbf segmentation
            finalRenderPassNeeded = true;
            segmentUsingTextbf(processedContent, outputSegments, "Fenced-Internal");
        }
    }

    // --- Helper: segmentUsingTextbf ---
   // --- Helper: segmentUsingTextbf ---
   function segmentUsingTextbf(textToSegment, outputSegments, context) {
    v3_blockRegex.lastIndex = 0;
    let localLastIndex = 0;
    let accumulatedPlainText = "";
    const currentSegmentOutputs = [];

    let blockMatch;
    while ((blockMatch = v3_blockRegex.exec(textToSegment)) !== null) {
        // --- Text BEFORE current \textbf block ---
        let textBefore = textToSegment.substring(localLastIndex, blockMatch.index).trim();
        if (textBefore) {
            accumulatedPlainText += (accumulatedPlainText ? "\n" : "") + textBefore;
        }

        // --- Process the \textbf block ---
        const blockTypeRaw = blockMatch[1].trim();
        let blockContent = blockMatch[2].trim();
        const isLowercase = blockTypeRaw && blockTypeRaw[0] === blockTypeRaw[0].toLowerCase() && blockTypeRaw[0] !== blockTypeRaw[0].toUpperCase();

        // *** MODIFICATION START ***
        // Define cleanTitle here so it's available in both branches
        const cleanTitle = blockTypeRaw.replace(/:$/, '').trim();
        const escapedTitle = cleanTitle.replace(/</g, "&lt;").replace(/>/g, "&gt;");

        if (isLowercase) {
             // Treat as part of ongoing plain text
             accumulatedPlainText += (accumulatedPlainText ? "\n" : "") + `\\textbf{${blockTypeRaw}}` + (blockContent ? (blockTypeRaw.endsWith(':') ? " " : ": ") + blockContent : "");
        } else {
            // --- Treat as a potential structural block OR a short title ---

            // 1. Finalize any previously accumulated plain text
            if (accumulatedPlainText) {
                currentSegmentOutputs.push(`<div class="explanation-text-segment">${accumulatedPlainText.replace(/\n/g, '<br>')}</div>`);
                accumulatedPlainText = ""; // Reset accumulator
            }

            // 2. Check if content is effectively empty
            if (!blockContent) {
                // Output simple styled title if content is empty/whitespace
                currentSegmentOutputs.push(`<span class="short-block-title">${escapedTitle}</span>`);
            } else {
                // Create the full structural block if content exists
                let blockTypeSlug = 'other';
                const blockTypeLower = blockTypeRaw.toLowerCase();
                for (const [key, slug] of Object.entries(ALL_TYPES_MAP)) {
                    if (blockTypeLower.includes(key.replace(/e$/, '')) || blockTypeLower === key) {
                        blockTypeSlug = slug;
                        break;
                    }
                }
                // Note: cleanTitle is already defined above
                currentSegmentOutputs.push(generateBlockHTML(blockTypeSlug, cleanTitle, blockContent, `${blockTypeSlug}-${blockCounter + 1}`));
            }
            // *** MODIFICATION END ***
        }
        localLastIndex = v3_blockRegex.lastIndex;
    }
    v3_blockRegex.lastIndex = 0;

    // --- Remaining Text AFTER the last \textbf block ---
    let remainingTextAfter = textToSegment.substring(localLastIndex).trim();
    if (remainingTextAfter) {
        accumulatedPlainText += (accumulatedPlainText ? "\n" : "") + remainingTextAfter;
    }

    // --- Finalize any leftover accumulated plain text ---
    if (accumulatedPlainText) {
         // *** MODIFICATION START ***
         currentSegmentOutputs.push(`<div class="explanation-text-segment">${accumulatedPlainText.replace(/\n/g, '<br>')}</div>`);
         // *** MODIFICATION END ***
    }

    // --- Handle case where the *entire segment* had no \textbf blocks ---
    if (currentSegmentOutputs.length === 0 && textToSegment.trim()) {
        // *** MODIFICATION START ***
        currentSegmentOutputs.push(`<div class="explanation-text-segment">${textToSegment.replace(/\n/g, '<br>')}</div>`);
        // *** MODIFICATION END ***
    }

    outputSegments.push(...currentSegmentOutputs);
}

    // --- Step 3: Set HTML and Run Final Pass ---
    const intermediateHTML = finalOutputSegments.join('\n');
    outputElement.innerHTML = intermediateHTML;

    if (finalRenderPassNeeded && intermediateHTML.trim() !== '') {
        if (typeof window.renderMathInElement === 'function') {
            const defaultFinalOptions = {
                delimiters: [
                    {left: '$$', right: '$$', display: true},
                    {left: '\\[', right: '\\]', display: true},
                    {left: '$', right: '$', display: false},
                    {left: '\\(', right: '\\)', display: false}
                ],
                throwOnError: false,
                errorColor: '#FF5555',
                trust: true // Be careful with this in production if input isn't sanitized
            };

            const effectiveFinalOptions = katexOptions ?
                { ...defaultFinalOptions, ...katexOptions } : defaultFinalOptions;

            try {
                 // console.log("Running final KaTeX rendering pass...");
                 window.renderMathInElement(outputElement, effectiveFinalOptions);
                 // console.log("Final KaTeX pass complete.");
            } catch(error) {
                console.error("Error in final KaTeX rendering pass:", error);
                // Avoid wiping content, maybe add an error message container
            }
        } else {
            console.warn("Final pass needed but window.renderMathInElement not found");
        }
    }

     // Ensure all blocks have tabindex set correctly after rendering
    outputElement.querySelectorAll('.explanation-block .explanation-block-header').forEach((header, index) => {
        header.setAttribute('tabindex', index === 0 ? '0' : '-1');
    });


    return { finalHTML: outputElement.innerHTML };
}